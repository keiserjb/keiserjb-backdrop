<?php
/**
 * @file
 * A short description of this module.
 */

/**
 * Implements hook_config_info().
 */
function title_display_config_info() {
  return array(
    'title_display.settings' => array(
      'label' => t('Title display settings'),
      'group' => t('Configuration'),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function title_display_field_extra_fields() {
  $config = config('title_display.settings');
  $all_view_modes = $config->get('view_modes');

  $extra = array();
  foreach ($all_view_modes as $entity_type => $entity_type_bundles) {
    // hook_field_extra_fields() specifies extra fields based on bundle type,
    // not display mode, so we end up exposing the title field on all display
    // modes, and then reducing it in
    // title_display_form_field_ui_display_form_alter().
    foreach ($entity_type_bundles as $bundle_name => $view_modes) {
      $extra[$entity_type][$bundle_name]['display']['title'] = array(
        'label' => t('Title'),
        'description' => t('The content title.'),
        'weight' => 0,
      );
    }

  }
  return $extra;
}

/**
 * Modify the Field UI display mode (for a particular bundle) form.
 */
function title_display_form_field_ui_display_form_alter(&$form, $form_state) {
  $entity_type = $form['#entity_type'];
  $view_mode = $form['#view_mode'];
  $bundle = $form['#bundle'];
  $settings = title_display_get_settings($entity_type, $bundle, $view_mode);

  // Remove the title field from listing if not enabled on this view mode.
  if (!$settings['enabled']) {
    $form['#extra'] = array_diff($form['#extra'], array('title'));
    unset($form['fields']['title']);
  }
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function title_display_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $node_type = $form['#node_type']->type;
    $form['title_display'] = array(
      '#title' => t('Title display'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#weight' => 0,
      '#tree' => TRUE,
      '#attached' => array(
        'js' => array(backdrop_get_path('module', 'title_display') . '/js/node-type-form.js'),
      ),
    );

    $entity_info = entity_get_info('node');
    $custom_view_modes = array_keys(field_view_mode_settings('node', $node_type));
    $view_mode_options = array();
    foreach ($entity_info['view modes'] as $view_mode_name => $view_mode_info) {
      if (in_array($view_mode_name, $custom_view_modes)) {
        $view_mode_options[$view_mode_name] = $view_mode_info['label'];
      }
    }

    $description = t('If enabled, the title field will be available as a field within the content area, so it can be positioned between other fields.');
    $description .= ' ' . t('Note the title may be duplicated at the top of the template unless suppressed by Views, Layout, or whichever module is rendering the content.');

    $form['title_display']['enabled_view_modes'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Display title as a field in these display modes'),
      '#description' => $description,
      '#weight' => 0,
      '#options' => $view_mode_options,
      // Value is populated in display mode loop below.
      '#default_value' => array(),
    );

    // Create a fieldset of options for each view mode, shown only when the
    // corresponding "enabled_view_modes" checkbox is checked.
    foreach ($view_mode_options as $view_mode_name => $view_mode_label) {
      $settings = title_display_get_settings('node', $node_type, $view_mode_name);
      if ($settings['enabled']) {
        $form['title_display']['enabled_view_modes']['#default_value'][] = $view_mode_name;
      }
      $form['title_display']['view_modes'][$view_mode_name] = _title_display_view_mode_form($settings);
      $form['title_display']['view_modes'][$view_mode_name] += array(
        '#type' => 'fieldset',
        '#title' => check_plain($view_mode_label),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#states' => array(
          'visible' => array(
            ':input[name="title_display[enabled_view_modes][' . $view_mode_name . ']"]' => array('checked' => TRUE),
          ),
        )
      );
    }

    $form['#submit'][] = 'title_display_form_node_type_form_submit';
  }
}

/**
 * Additional submit handler for node_type_form().
 */
function title_display_form_node_type_form_submit(&$form, $form_state) {
  $config = config('title_display.settings');
  $node_type = $form['#node_type']->type;

  // Shorten up value variables.
  $title_display_values = $form_state['values']['title_display'];
  $enabled_view_modes = array_filter($title_display_values['enabled_view_modes']);

  // Only save settings for view modes that are enabled.
  $view_mode_settings = array();
  foreach ($enabled_view_modes as $view_mode) {
    $view_mode_settings[$view_mode] = array(
      'link' => (bool) $title_display_values['view_modes'][$view_mode]['link'],
      'tag' => $title_display_values['view_modes'][$view_mode]['tag'],
      'class' => $title_display_values['view_modes'][$view_mode]['class'],
    );
  }
  $config->set("view_modes.node.$node_type", $view_mode_settings);
  $config->save();

  module_load_include('inc', 'field', 'field.info');
  field_info_cache_clear();
}

/**
 * Partial form for configuring a view mode's title display settings.
 */
function _title_display_view_mode_form($settings) {
  $subform['link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link title to content'),
    '#default_value' => $settings['link'],
  );
  $subform['tag'] = array(
    '#type' => 'select',
    '#title' => t('Title tag'),
    '#default_value' => $settings['tag'],
    '#options' => array(
      'h1' => 'H1',
      'h2' => 'H2',
      'h3' => 'H3',
      'h4' => 'H4',
      'div' => 'DIV',
      'span' => 'SPAN',
    ),
  );
  $subform['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Title classes'),
    '#default_value' => $settings['class'],
    '#description' => t('Additional classes to be added to the title tag. Separate multiple classes by spapces.'),
    '#element_validate' => array('_title_display_class_validate'),
  );

  return $subform;
}

/**
 * Element validate handler to check for valid class names.
 */
function _title_display_class_validate($element, &$form, $form_state) {
  // Validate the class list.
  $classes = explode(' ', $element['#value']);

  foreach ($classes as $class) {
    if ($class != backdrop_html_class($class)) {
      form_error($element, t('Title classes contain invalid characters; classes should be lowercase and may contain letters, numbers, and dashes.'));
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function title_display_entity_view(Entity $entity, $entity_type, $view_mode, $language) {
  $settings = title_display_get_settings($entity_type, $entity->bundle(), $view_mode);

  if ($settings['enabled']) {
    $tag = $settings['tag'];
    $attributes = array();
    if (!empty($settings['class'])) {
      $attributes['class'] = explode(' ', $settings['class']);
    }
    $attributes = backdrop_attributes($attributes);
    $title_output = "<$tag$attributes>";
    if ($settings['link']) {
      $uri = $entity->uri();
      $title_output .= l($entity->label(), $uri['path'], $uri['options']);
    }
    else {
      $title_output .= check_plain($entity->label());
    }
    $title_output .= "</$tag>";
    $entity->content['title'] = array(
      '#markup' => $title_output,
      '#weight' => 1,
    );
  }
}

/**
 * Implements hook_preprocess_node().
 */
function title_display_preprocess_node(&$variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  if (title_display_check_enabled('node', $node->type, $view_mode)) {
    $variables['title'] = NULL;
  }
}

/**
 * Check if Title Display is enabled on a particular entity type and bundle.
 *
 * @param string $entity_type
 *   The entity type such as node, user, etc.
 * @param string $bundle_name
 *   The bundle name such as the content type (e.g. post, page).
 * @param string $view_mode
 *   The name of the view mode being checked.
 *
 * @return bool
 *   TRUE if enabled, FALSE if not.
 */
function title_display_check_enabled($entity_type, $bundle_name, $view_mode) {
  $config = config('title_display.settings');
  $all_view_modes = $config->get('view_modes');
  return isset($all_view_modes[$entity_type][$bundle_name][$view_mode]);
}

/**
 * Load Title Display module settings for an entity type and view mode.
 *
 * @param string $entity_type
 *   The entity type such as node, user, etc.
 * @param string $bundle_name
 *   The bundle name such as the content type (e.g. post, page).
 * @param string $view_mode
 *   View mode such as full, teaser, card, etc.
 *
 * @return array
 *   An array of settings with at least the following properties defined:
 *   - enabled: Whether any settings should be applied to this view mode.
 *   - tag: The HTML tag to be used for the title, such as h3, div, etc.
 *   - class: Any HTML classes as a string separated by spaces.
 */
function title_display_get_settings($entity_type, $bundle_name, $view_mode) {
  $config = config('title_display.settings');
  $all_view_modes = $config->get('view_modes');
  $defaults = array(
    'enabled' => FALSE,
    'link' => TRUE,
    'tag' => 'h3',
    'class' => '',
  );
  if (isset($all_view_modes[$entity_type][$bundle_name][$view_mode])) {
    $all_view_modes[$entity_type][$bundle_name][$view_mode]['enabled'] = TRUE;
    return $all_view_modes[$entity_type][$bundle_name][$view_mode] + $defaults;
  }
  else {
    return $defaults;
  }
}
