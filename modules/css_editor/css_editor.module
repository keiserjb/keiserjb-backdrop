<?php

/**
 * @file
 * CSS Editor.
 */

/**
 * Implements hook_config_info().
 */
function css_editor_config_info() {
  $prefixes['css_editor.settings'] = array(
    'label' => t('CSS Editor settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_init().
 */
function css_editor_init() {
  global $theme;
  $enabled_themes = config_get('css_editor.settings', 'css_editor_enabled_themes');
  if (isset($enabled_themes[$theme]) && $enabled_themes[$theme] && !isset($_REQUEST['theme'])) {
    backdrop_add_css(theme_get_setting('css', $theme),
    array('type' => 'inline', 'weight' => 9999, 'group' => CSS_THEME));
  }
}

/**
 * Implements hook_menu().
 */
function css_editor_menu() {
  $items = array();
  $items['admin/config/user-interface/css-editor'] = array(
    'title' => 'CSS Editor',
    'description' => 'General settings for custom CSS per theme.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('css_editor_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Form function for item `admin/config/user-interface/css`.
 */
function css_editor_admin_settings() {
  $themes = array();
  foreach (list_themes(TRUE) as $name => $theme) {
    if ($theme->status) {
      $themes[$name] = $name;
    }
  }
  $form['#config'] = 'css_editor.settings';
  $form['css_editor_enabled_themes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled themes'),
    '#description' => t('Choose which themes can use the custom CSS feature.'),
    '#options' => $themes,
    '#default_value' => config_get('css_editor.settings', 'css_editor_enabled_themes'),
  );
  $form = system_settings_form($form);
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter() for `system_theme_settings`().
 */
function css_editor_form_system_theme_settings_alter(&$form, &$form_state, $form_id) {
  $theme = arg(3);
  $enabled_themes = config_get('css_editor.settings', 'css_editor_enabled_themes');
  if (isset($enabled_themes[$theme]) && $enabled_themes[$theme]) {
    $form['css'] = array(
      '#title' => t('Custom CSS'),
      '#type' => 'textarea',
      '#prefix' => '<div id="css-editor-field">',
      '#description' => t('Type custom CSS code for this theme, above. If enabled, preview is displayed below.'),
      '#default_value' => theme_get_setting('css', $theme),
      '#attributes' => array('id' => 'css-editor-textarea'),
      '#suffix' => '</div>',
    );
    $preview_url = url('<front>', array(
      'absolute' => TRUE,
      'query' => array(
        'theme' => $theme,
      ),
    ));
    $form['css_preview'] = array(
      '#markup' => '<iframe src="' . $preview_url . '" id="css-editor-preview">' . t('Frames are not supported.') . '</iframe>',
    );
    backdrop_add_js(backdrop_get_path('module', 'css_editor') . '/lib/codemirror-3.11/lib/codemirror.js');
    backdrop_add_css(backdrop_get_path('module', 'css_editor') . '/lib/codemirror-3.11/lib/codemirror.css');
    backdrop_add_js(backdrop_get_path('module', 'css_editor') . '/lib/codemirror-3.11/mode/css/css.js');
    backdrop_add_js(backdrop_get_path('module', 'css_editor') . '/js/css_editor.js');
    backdrop_add_css(backdrop_get_path('module', 'css_editor') . '/css/css_editor.css');
    backdrop_add_js(array('CSSEditor' => array('frontPage' => $preview_url)), 'setting');
  }
}

/**
 * Implements hook_theme().
 */
function css_editor_custom_theme() {
  if (isset($_REQUEST['theme']) &&
      !empty(filter_input(INPUT_SERVER, 'HTTP_REFERER')) &&
      filter_input(INPUT_SERVER, 'HTTP_REFERER') == url('admin/appearance/settings/' . $_REQUEST['theme'], array('absolute' => TRUE))) {

    return $_REQUEST['theme'];
  }
}
